CCEffect %{
    techniques:
    - name: opaque
      passes:
      - vert: vs
        frag: fs
        blendState:
          targets:
            - blend: true
              blendSrc: src_alpha
              blendDst: one_minus_src_alpha
}%

CCProgram vs %{
    precision highp float;
    #include <cc-global>
    in vec3 a_position;
    in vec2 a_uv0;
    out vec2 v_uv0;
    void main() {
        v_uv0 = a_uv0;
        gl_Position = cc_matProj * cc_matView * vec4(a_position, 1.0);
    }
}%

CCProgram fs %{
    precision mediump float;
    #ifdef GL_ES
    precision mediump float;
    #endif
    in vec2 v_uv0;
    uniform sampler2D u_texture;
    uniform BlurParams {
        vec2 resolution;
        float radius;
        float strength;
    };
    const float blurRadius = 2.0;
    const float blurPixels = (blurRadius * 2.0 + 1.0) * (blurRadius * 2.0 + 1.0);
    layout(location = 0) out vec4 fragColor;
    void main() {
        vec3 sumColor = vec3(0.0, 0.0, 0.0);
        vec2 tex_offset = 1.0 / resolution;
        for(float fy = -blurRadius; fy <= blurRadius; ++fy) {
            for(float fx = -blurRadius; fx <= blurRadius; ++fx) {
                vec2 offset = vec2(fx, fy) * tex_offset * radius;
                sumColor += texture(u_texture, v_uv0 + offset).rgb;
            }
        }
        vec3 originalColor = texture(u_texture, v_uv0).rgb;
        fragColor = vec4(mix(originalColor, sumColor / blurPixels, strength), 1.0);
    }
}%
