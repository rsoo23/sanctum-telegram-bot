name: CI/CD Workflow

on:
  push:
    branches:
    - dev
    - main

jobs:
  build_prod:
    runs-on: macos-latest
    if: github.ref == 'refs/heads/main'

    env:
      ENV: production
      GA_ID_PRODUCTION: ${{ secrets.GA_ID_PRODUCTION }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Download and unzip Cocos Creator
        run: |
          curl -o CocosCreator.zip https://sanctum.s3.ap-southeast-1.amazonaws.com/CocosCreator.zip
          unzip -q CocosCreator.zip -d /Applications

      - name: Inject Google Analytics into index.ejs
        run: |
          chmod +x ./cicd_scripts/inject_ga.sh
          ./cicd_scripts/inject_ga.sh
    
      - name: Build Cocos Creator project
        run: |
          /Applications/CocosCreator.app/Contents/MacOS/CocosCreator --project ./Game --build "platform=web-mobile;buildPath=./Game/build;name=sanctum-telegram-game;platform=web-mobile;startScene=27507cdc-65b2-429e-8af5-395ac1f19b0e;replaceSplashScreen=true;debug=false"
        continue-on-error: true

      - name: Zip the build file
        run: |
          zip -r build.zip ./Game/build/*

      - name: Upload build artifacts
        uses: actions/upload-artifact@v2
        with:
          name: prod_build
          path: ./build.zip
          error: "Error uploading build.zip"

  deploy_prod_to_amplify:
    needs: build_prod
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Download build artifacts
        uses: actions/download-artifact@v2
        with:
          name: prod_build

      - name: Setup Node.js environment
        uses: actions/setup-node@v4.0.3

      - name: Update npm to the latest version
        run: npm install -g npm@latest

      - name: Deploy to amplify using amplify-cli
        run: | 
          npm install -g @aws-amplify/cli

            - name: Aws Amplify Deployer Action
  
      - name: Amplify deployment 
        uses: luisgreen/amplify_deployment@v0.0.1
        with:
          # Amplify Application ID
          appId: d9awhrcy4yrc0
          # Amplify Application branch to deploy
          branchName: staging
          # Path where the artifact is located to be deployed
          artifactPath: /build.zip
          # Region of the Amplify Application
          region: us-east-1
  
      # - name: Pull Amplify environment
      #   run: amplify pull \
      #     --yes \
      #     --amplify "{\"envName\":\"main\"}" \
      #     --providers "{\"awscloudformation\":{\"configLevel\":\"project\",\"useProfile\":false,\"profileName\":\"default\",\"accessKeyId\":\"${{ secrets.AWS_ACCESS_KEY_ID }}\",\"secretAccessKey\":\"${{ secrets.AWS_SECRET_ACCESS_KEY }}\",\"region\":\"us-east-1\"}}" 

      # - name: Checkout Amplify environment
      #   run: amplify env checkout main # Change this to your desired branch
      #   env:
      #     AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #     AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      # - name: Amplify push
      #   run: amplify push --yes
      #   env:
      #     AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #     AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  
      # discord
      - name: Notify on Discord
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            message="[sanctum-telegram-game] [build_prod] succeeded";
          else
            message="[sanctum-telegram-game] [build_prod] failed";
          fi
          curl -H "Content-Type: application/json" -X POST -d "{\"content\": \"${message}\"}" ${{ secrets.DISCORD_WEBHOOK_URL }}
