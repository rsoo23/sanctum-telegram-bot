on:
  push:
    branches:
    - dev
    - main

jobs:
  build_prod:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    # environment: ${{ github.ref == 'refs/heads/main' && 'prod' || github.ref == 'refs/heads/dev' && 'stage'}}
    # environment: 'prod'

    env:
      AWSHOST: ${{ secrets['AWSHOST_MAIN'] }}
      USERNAME: ${{ secrets['USERNAME_MAIN'] }}
      DOT_ENV: ${{ secrets['DOT_ENV_MAIN'] }}
      EC2_SSH_KEY_BASE64: ${{ secrets['EC2_SSH_KEY_BASE64_MAIN'] }}
      PEMKEY: ${{ secrets['PEMKEY_MAIN'] }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Copy env
        run: |
          echo "${{ env.DOT_ENV }}" > .env

      - name: Build and run docker compose
        run: |
          docker compose -f docker-compose.dev.yml up -d --build

      - name: Run tests
        run: |
          docker exec sanctum-telegram-bot-backend-1 python manage.py test api

      - name: Decode SSH key
        run: |
          echo "${{ env.EC2_SSH_KEY_BASE64 }}" | base64 --decode > /tmp/mykey.pem

      - name: Set permissions on the key
        run: chmod 600 /tmp/mykey.pem

      - name: Set permissions on workspace
        run: chmod 755 ${{ github.workspace}}

      - name: Set up SSH
        run: |
          eval $(ssh-agent -s)
          ssh-add /tmp/mykey.pem

      - name: SCP files via ssh key
        uses: appleboy/scp-action@master
        with:
          host: ${{env.AWSHOST}}
          username: ${{env.USERNAME}}
          key: ${{ env.PEMKEY }}
          # source: '/home/runner/work/sanctum-telegram-bot/sanctum-telegram-bot'
          source: ${{ github.workspace}}
          target: '/home/ubuntu'

      - name: Deploy on EC2
        run: |
          if [ "${{ matrix.branch }}" == "dev" ]; then
            ssh -o StrictHostKeyChecking=no -i /tmp/mykey.pem ${{env.USERNAME}}@${{env.AWSHOST}} << 'EOF'
              cd /home/ubuntu/github/workspace/
              # sudo docker-compose down
              sudo docker compose -f docker-compose.staging.yml up --build -d
            EOF
          elif [ "${{ matrix.branch }}" == "main" ]; then
            ssh -o StrictHostKeyChecking=no -i /tmp/mykey.pem ${{env.USERNAME}}@${{env.AWSHOST}} << 'EOF'
              cd /home/ubuntu/github/workspace/
              # sudo docker-compose down
              sudo docker compose -f docker-compose.yml up --build -d
            EOF
          fi
  build_stage:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/dev'
    # environment: ${{ github.ref == 'refs/heads/main' && 'prod' || github.ref == 'refs/heads/dev' && 'stage'}}
    # environment: 'stage'

    env:
      AWSHOST: ${{ secrets['AWSHOST_DEV'] }}
      USERNAME: ${{ secrets['USERNAME_DEV'] }}
      DOT_ENV: ${{ secrets['DOT_ENV_DEV'] }}
      EC2_SSH_KEY_BASE64: ${{ secrets['EC2_SSH_KEY_BASE64_DEV'] }}
      PEMKEY: ${{ secrets['PEMKEY_DEV'] }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Copy env
        run: |
          echo "${{ env.DOT_ENV }}" > .env

      - name: Build and run docker compose
        run: |
          docker compose -f docker-compose.dev.yml up -d --build

      - name: Run tests
        run: |
          docker exec sanctum-telegram-bot-backend-1 python manage.py test api

      - name: Decode SSH key
        run: |
          echo "${{ env.EC2_SSH_KEY_BASE64 }}" | base64 --decode > /tmp/mykey.pem

      - name: Set permissions on the key
        run: chmod 600 /tmp/mykey.pem

      - name: Set permissions on workspace
        run: chmod 755 ${{ github.workspace}}

      - name: Set up SSH
        run: |
          eval $(ssh-agent -s)
          ssh-add /tmp/mykey.pem

      - name: SCP files via ssh key
        uses: appleboy/scp-action@master
        with:
          host: ${{env.AWSHOST}}
          username: ${{env.USERNAME}}
          key: ${{ env.PEMKEY }}
          # source: '/home/runner/work/sanctum-telegram-bot/sanctum-telegram-bot'
          source: ${{ github.workspace}}
          target: '/home/ubuntu'

      - name: Deploy on EC2
        run: |
          if [ "${{ matrix.branch }}" == "dev" ]; then
            ssh -o StrictHostKeyChecking=no -i /tmp/mykey.pem ${{env.USERNAME}}@${{env.AWSHOST}} << 'EOF'
              cd /home/ubuntu/github/workspace/
              # sudo docker-compose down
              sudo docker compose -f docker-compose.staging.yml up --build -d
            EOF
          elif [ "${{ matrix.branch }}" == "main" ]; then
            ssh -o StrictHostKeyChecking=no -i /tmp/mykey.pem ${{env.USERNAME}}@${{env.AWSHOST}} << 'EOF'
              cd /home/ubuntu/github/workspace/
              # sudo docker-compose down
              sudo docker compose -f docker-compose.yml up --build -d
            EOF
          fi


